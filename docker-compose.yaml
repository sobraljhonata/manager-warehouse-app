version: '3.8'
services:
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - ecommerce-network
    volumes:
      - mongo-data:/data/db

  postgres-stock:
    image: postgres:15
    container_name: postgres-stock
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stock_db
    ports:
      - "5433:5432"
    networks:
      - ecommerce-network
    volumes:
      - postgres-stock-data:/var/lib/postgresql/data
      - ./stock-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-edi:
    image: postgres:15
    container_name: postgres-edi
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: edi_db
    ports:
      - "5434:5432"
    networks:
      - ecommerce-network
    volumes:
      - postgres-edi-data:/var/lib/postgresql/data
      - ./edi-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - ecommerce-network

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - kafka
    networks:
      - ecommerce-network
    environment:
      - MONGO_URI=mongodb://mongo:27017/ecommerce
      - KAFKA_BROKER=kafka:9092

  stock-service:
    build:
      context: ./stock-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - postgres-stock
      - kafka
    networks:
      - ecommerce-network
    environment:
      - POSTGRES_URI=postgres://postgres:postgres@postgres-stock:5432/stock_db
      - KAFKA_BROKER=kafka:9092

  edi-service:
    build:
      context: ./edi-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - postgres-edi
      - kafka
    networks:
      - ecommerce-network
    environment:
      - POSTGRES_URI=postgres://postgres:postgres@postgres-edi:5432/edi_db
      - KAFKA_BROKER=kafka:9092

networks:
  ecommerce-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-stock-data:
  postgres-edi-data: